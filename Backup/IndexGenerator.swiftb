//
//  Created by Manuel Vrhovac on 20/08/2018.
//  Copyright Â© 2018 Manuel Vrhovac. All rights reserved.
//

import Foundation

/*

protocol IndexGeneratorDataSource {
    func currentIndex(for generator: IndexGenerator?) -> Int
    func count(for generator: IndexGenerator?) -> Int
}

struct IndexGenerator {
    
    typealias Block = () -> Int
    
    enum Source {
        case blocks(currentIndex: Block, count: Block)
        case dataSource(IndexGeneratorDataSource)
    }
    
    enum Direction {
        case upcoming
        case past
        case mixed
    }
    
    struct Options {
        let range: Int
        let offset: Int
        let direction: Direction
        let includesCurrent: Bool
        let overflowAllowed: Bool
        
    }
    
    let options: Options

    
    /// This is where the generator gets the currentIndex and count from.
    var source: Source
    
    
    init(range: Int,
         direction: Direction,
         offset: Int,
         currentIndex: @escaping Block,
         count: @escaping Block,
         includesCurrent: Bool = true,
         overflowAllowed: Bool = true) {
        self.range = range
        self.direction = direction
        self.source = .blocks(currentIndex: currentIndex, count: count)
        self.includesCurrent = includesCurrent
        self.overflowAllowed = overflowAllowed
        self.offset = offset
    }
    
    init(range: Int,
         direction: Direction,
         offset: Int,
         dataSource: IndexGeneratorDataSource,
         includesCurrent: Bool = true,
         overflowAllowed: Bool = true) {
        self.range = range
        self.direction = direction
        self.source = .dataSource(dataSource)
        self.includesCurrent = includesCurrent
        self.overflowAllowed = overflowAllowed
        self.offset = offset
    }
    
}

*/
fileprivate extension Int {
    func limitedBy(count: Int) -> Int {
        var current = self
        while current < 0 {
            current += count
        }
        return current % count
    }
}

